name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}
jobs:
  # echo:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: ${{ tojson(github) }}
  #       shell: cat {0}
  release:
    # prevents this action from running on forks
    if: >-
      github.repository == 'kt-public/nosql-constraints' && 
      github.ref == 'refs/heads/master' && 
      github.event.workflow_run.event == 'push' && 
      github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write # to create release (changesets/action)
      id-token: write # OpenID Connect token needed for provenance
      pull-requests: write # to create pull request (changesets/action)
    name: Release
    runs-on: ubuntu-latest
    steps:
      - id: app-token
        uses: kt-public/github-actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.WORKFLOW_APP_ID }}
          private-key: ${{ secrets.WORKFLOW_APP_PRIVATE_KEY }}
          configure-git: false

      - uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run build

      - id: changesets
        uses: changesets/action@v1
        with:
          #   # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: npm run changeset:publish
          version: npm run changeset:version
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_CONFIG_PROVENANCE: true
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      # cat error log from npm, file could be something like this: /home/runner/.npm/_logs/2025-04-05T17_32_44_589Z-debug-0.log
      # But we don't know the name of the file, so we need to find it
      # Loop over the log files, print log file name and contents
      - name: Check for npm error log
        id: check-npm-error-log
        run: |
          # Check if there are any npm error logs
          echo "Checking for npm error log file..."
          if ls /home/runner/.npm/_logs/*.log 1> /dev/null 2>&1; then
            echo "npm error log file found"
            echo "npm_error_log=true" >> $GITHUB_ENV
          else
            echo "No npm error log file found"
            echo "npm_error_log=false" >> $GITHUB_ENV
          fi
          # Loop over the log files, print log file name and contents
          for file in /home/runner/.npm/_logs/*.log; do
            echo "Log file: $file"
            cat "$file"
          done
          exit -1
